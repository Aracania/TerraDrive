% ========== INITIAL SETUP ==========
delete(instrfindall);  % Clear any previous serial connections

arduinoCom = serial('COM9', 'BaudRate', 9600);
fopen(arduinoCom);
pause(2);  % Give Arduino time to initialize

% Reference latitude and longitude (your origin)
latRef = 7.214971;
lonRef = 124.248697;
R = 6371000;  % Earth's radius in meters

lat0_rad = deg2rad(latRef);
lon0_rad = deg2rad(lonRef);

% Desired waypoints
pointx = [3.48412, 7.00530, 10.56354, 14.08472, 17.60590, 21.12709];
pointy = [-2.63162, -5.22617, -7.85779, -10.45235, -13.08397, -15.67852];
pointz = [-36.86990, -36.57303, -36.86990, -35.70669, -36.86990, -36.57303];

% Interpolant for terrain elevation
F = scatteredInterpolant(pointx', pointy', pointz', 'linear', 'nearest');

% Load fuzzy inference system
fis = readfis('sugenotype1.fis');

% ========== MAIN LOOP FOR EACH WAYPOINT ==========
for i = 1:length(pointx)

    fprintf('\nMoving to waypoint #%d...\n', i);
    
    % -- Wait for GPS input from Arduino --
    flushinput(arduinoCom);  % Clear serial buffer
    pause(0.5);

    gpsLine = fgetl(arduinoCom);  % Expecting: 'lat,lon\n'

    % Safety check
    if isempty(gpsLine) || ~contains(gpsLine, ',')
        warning('Invalid GPS data received. Skipping this loop...');
        continue;
    end

    gpsParts = strsplit(strtrim(gpsLine), ',');
    
    if numel(gpsParts) < 2
        warning('Incomplete GPS data received. Skipping...');
        continue;
    end

    currentlat = str2double(gpsParts{1});
    currentlon = str2double(gpsParts{2});

    if isnan(currentlat) || isnan(currentlon)
        warning('Non-numeric GPS values. Skipping...');
        continue;
    end

    % -- Convert to local X, Y --
    clat_rad = deg2rad(currentlat);
    clon_rad = deg2rad(currentlon);

    currentx = R * (clon_rad - lon0_rad) * cos(lat0_rad);
    currenty = R * (clat_rad - lat0_rad);
    currentz = F(currentx, currenty);  % Estimate Z

    % -- Fuzzy Logic Evaluation --
    fuzzyInput = [currentx, currenty, currentz];
    output = evalfis(fis, fuzzyInput);  % [yL, yR]

    % -- Send Output to Arduino --
    fprintf(arduinoCom, '%.2f,%.2f\n', output(1), output(2));
    
    % -- Print Status --
    fprintf('Current [x,y,z] = [%.2f, %.2f, %.2f], yL = %.2f, yR = %.2f\n', ...
        currentx, currenty, currentz, output(1), output(2));

    pause(1);  % Adjust depending on speed and distance

end

% ========== CLOSE ==========
fclose(arduinoCom);
delete(arduinoCom);
clear arduinoCom;

disp('Navigation complete. Serial connection closed.');
